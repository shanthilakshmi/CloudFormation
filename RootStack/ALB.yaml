AWSTemplateFormatVersion: 2010-09-09

Description: This template creates an Application load balancer

Parameters:
 VpcId:
  Type: String

 PublicSubnet1:
  Type: String

 PublicSubnet2:
  Type: String

 SecurityGroups:
  Type: String

 EC2Instance1:
  Type: String

 EC2Instance2:
  Type: String

Resources:
 ApplicationLoadBalancer:
  Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  Properties:
   Name: MyApplicationLoadBalancer
   Scheme: internet-facing
   SecurityGroups: [ !Ref SecurityGroups ]
   Subnets: [ !Ref PublicSubnet1, !Ref PublicSubnet2  ]

 ALBListenerNoSslCertificate:
  Type: AWS::ElasticLoadBalancingV2::Listener
  Properties:
   DefaultActions:
    - Type: forward
      TargetGroupArn: !Ref ALBTargetGroup
   LoadBalancerArn: !Ref ApplicationLoadBalancer
   Port: 80
   Protocol: HTTP

 ALBTargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
   HealthCheckIntervalSeconds: 10
   HealthCheckPath: /
   HealthCheckTimeoutSeconds: 5
   HealthyThresholdCount: 2
   Matcher:  
    HttpCode: 200,302 
   Name: MyWebServers
   Port: 80
   Protocol: HTTP
   Targets:
    - Id: !Ref EC2Instance1
      Port: 80
    - Id: !Ref EC2Instance2
      Port: 80
   TargetType: instance
   UnhealthyThresholdCount: 5
   VpcId: !Ref VpcId

Outputs:
 ALBTargetGroup:
  Description: WebServer Target Group
  Export:
   Name: !Sub ${AWS::StackName}-ALBTargetGroup
  Value: !Ref ALBTargetGroup

 ApplicationLoadBalancerDnsName:
  Description: Application load balancer arn name
  Export:
   Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
  Value: !GetAtt ApplicationLoadBalancer.DNSName

 ApplicationLoadBalancerZoneID:
  Description: Application Load Balancer Canonical Hosted Zone ID
  Export:
   Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneID
  Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
