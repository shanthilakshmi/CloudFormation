AWSTemplateFormatVersion: 2010-09-09
Description: This template creates Vpc, Public & Private subnets
Parameters:
  VpcCidr:
    # Default: 10.0.0.0/16
    Description: Please entere the IP range for this VPC
    Type: String
  PublicSubnet1Cidr:
    # Default: 10.0.0.0/24
    Description: Please entere the IP range for this Public subnet 1
    Type: String
  PublicSubnet2Cidr:
    # Default: 10.0.1.0/24
    Description: Please entere the IP range for this Public subnet 2
    Type: String
  PrivateSubnet1Cidr:
    # Default: 10.0.2.0/24
    Description: Please entere the IP range for this Private subnet 1
    Type: String
  PrivateSubnet2Cidr:
    # Default: 10.0.3.0/24
    Description: Please entere the IP range for this Priavte subnet 2
    Type: String
  PrivateSubnet3Cidr:
    # Default: 10.0.4.0/24
    Description: Please entere the IP range for this Priavte subnet 2
    Type: String   
  PrivateSubnet4Cidr:
    # Default: 10.0.5.0/24
    Description: Please entere the IP range for this Priavte subnet 2
    Type: String
  SSHLocation:
    # AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    # ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    # Default: 0.0.0.0/0
    # Description: The IP address range that can be used to access the web server using SSH.
    # MaxLength: '18'
    # MinLength: '9'
    Type: String

Resources:
 VPC:
   Type: AWS::EC2::VPC
   Properties:
     CidrBlock: !Ref VpcCidr
     EnableDnsHostnames: true
     EnableDnsSupport: true
     InstanceTenancy: default
     Tags:
      - Key: Name
        Value: DemoVPC
 InternetGateway:
   Type: AWS::EC2::InternetGateway
   Properties:
     Tags:
       - Key: Name
         Value: Demo IGW
 InternetGatewayAttachment:
   Type: AWS::EC2::VPCGatewayAttachment
   Properties:
     InternetGatewayId: !Ref InternetGateway
     VpcId: !Ref VPC
 PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC
 PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC
 PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC
 PublicRoute:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
 PublicSubnet1RouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
 PublicSubnet2RouteTableAssosiation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
 PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 | App Tier
      VpcId: !Ref VPC     
 PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 | App Tier
      VpcId: !Ref VPC   
 PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet3Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3 | DataBase Tier
      VpcId: !Ref VPC
 PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 4 | DataBase Tier
      VpcId: !Ref VPC
 ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC
 SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC
 WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC
 DataBaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open Database for Access
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: DataBase Security Group

Outputs:
 VPC:
  Description: VPC ID
  Export:
   Name: !Sub ${AWS::StackName}-VPC
  Value: !Ref VPC

 PublicSubnet1:
  Description: Public Subnet1 ID
  Export:
   Name: !Sub ${AWS::StackName}-PublicSubnet1
  Value: !Ref PublicSubnet1

 PublicSubnet2:
  Description: Public Subnet2 ID
  Export:
   Name: !Sub ${AWS::StackName}-PublicSubnet2
  Value: !Ref PublicSubnet2

 PrivateSubnet1:
  Description: Private Subnet1 ID
  Export:
   Name: !Sub ${AWS::StackName}-PrivateSubnet1
  Value: !Ref PrivateSubnet1

 PrivateSubnet2:
  Description: Private Subnet2 ID
  Export:
   Name: !Sub ${AWS::StackName}-PrivateSubnet2
  Value: !Ref PrivateSubnet2

 PrivateSubnet3:
  Description: Private Subnet3 ID
  Export:
   Name: !Sub ${AWS::StackName}-PrivateSubnet3
  Value: !Ref PrivateSubnet3

 PrivateSubnet4:
  Description: Private Subnet4 ID
  Export:
   Name: !Sub ${AWS::StackName}-PrivateSubnet4
  Value: !Ref PrivateSubnet4

 ALBSecurityGroup:
  Description: Application Load balancer security group Id
  Export:
   Name: !Sub ${AWS::StackName}-ALBSecurityGroup
  Value: !Ref ALBSecurityGroup

 SSHSecurityGroup:
  Description: SSH security group Id
  Export:
   Name: !Sub ${AWS::StackName}-SSHSecurityGroup
  Value: !Ref SSHSecurityGroup

 WebServerSecurityGroup:
  Description: Webserver security group Id
  Export:
   Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
  Value: !Ref WebServerSecurityGroup

 DataBaseSecurityGroup:
  Description: DataBase Security Group Id
  # Export:
  #  Name: !Sub ${AWS::StackName}-DataBaseSecurityGroupId
  Value: !Ref DataBaseSecurityGroup